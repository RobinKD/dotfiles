# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:
let
  tradenote = pkgs.writeShellScriptBin "tradenote" ''
    is_active=$(systemctl is-active docker-compose-tradenote-root.target)
    if [ $is_active == "active" ]; then
      echo "Systemd service active, stopping..."
      systemctl stop docker-compose-tradenote-root.target
    else
      echo "Systemd service inactive, starting..."
      systemctl start docker-compose-tradenote-root.target
      echo "Now you can go to http://localhost:8080"
    fi
  '';
in
{

  environment.systemPackages = [ tradenote ];
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."tradenote_app" = {
    image = "tradenote:latest";
    environment = {
      "APP_ID" = "123456";
      "MASTER_KEY" = "123456";
      "MONGO_URI" = "mongodb://tradenote:tradenote@mongo:27017/tradenote?authSource=admin";
      "TRADENOTE_DATABASE" = "tradenote";
      "TRADENOTE_PORT" = "8080";
    };
    ports = [
      "8080:8080/tcp"
    ];
    dependsOn = [
      "tradenote_db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--hostname=tradenote_app"
      "--network-alias=tradenote"
      "--network=tradenote_default"
    ];
  };
  systemd.services."docker-tradenote_app" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-tradenote_default.service"
    ];
    requires = [
      "docker-network-tradenote_default.service"
    ];
    partOf = [
      "docker-compose-tradenote-root.target"
    ];
    wantedBy = [
      "docker-compose-tradenote-root.target"
    ];
  };
  virtualisation.oci-containers.containers."tradenote_db" = {
    image = "mongo:latest";
    environment = {
      "MONGO_INITDB_DATABASE" = "tradenote";
      "MONGO_INITDB_ROOT_PASSWORD" = "tradenote";
      "MONGO_INITDB_ROOT_USERNAME" = "tradenote";
    };
    volumes = [
      "tradenote_db:/data/db:rw"
    ];
    ports = [
      "27017:27017/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mongo"
      "--network=tradenote_default"
    ];
  };
  systemd.services."docker-tradenote_db" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-tradenote_default.service"
      "docker-volume-tradenote_db.service"
    ];
    requires = [
      "docker-network-tradenote_default.service"
      "docker-volume-tradenote_db.service"
    ];
    partOf = [
      "docker-compose-tradenote-root.target"
    ];
    wantedBy = [
      "docker-compose-tradenote-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-tradenote_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f tradenote_default";
    };
    script = ''
      docker network inspect tradenote_default || docker network create tradenote_default
    '';
    partOf = [ "docker-compose-tradenote-root.target" ];
    wantedBy = [ "docker-compose-tradenote-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-tradenote_db" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect tradenote_db || docker volume create tradenote_db
    '';
    partOf = [ "docker-compose-tradenote-root.target" ];
    wantedBy = [ "docker-compose-tradenote-root.target" ];
  };

  # Builds
  systemd.services."docker-build-tradenote_app" = {
    path = [
      pkgs.docker
      pkgs.git
    ];
    serviceConfig = {
      Type = "oneshot";
      TimeoutSec = 300;
    };
    script = ''
      cd /home/keanu/Trading/TradeNote
      docker build -t tradenote:latest -f ./docker/Dockerfile .
    '';
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-tradenote-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    # wantedBy = [ "multi-user.target" ];
    # Disabled by default
    wantedBy = lib.mkForce [ ];
  };
}
